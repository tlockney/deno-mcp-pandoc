name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - target: x86_64-apple-darwin
            name: mcp-pandoc-mac-x86_64
          - target: aarch64-apple-darwin
            name: mcp-pandoc-mac-arm64
          - target: x86_64-unknown-linux-gnu
            name: mcp-pandoc-linux-x86_64
          - target: aarch64-unknown-linux-gnu
            name: mcp-pandoc-linux-arm64
          - target: x86_64-pc-windows-msvc
            name: mcp-pandoc-windows-x86_64

    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Get version
        id: version
        run: |
          VERSION=$(deno eval "import config from './deno.json' with { type: 'json' }; console.log(config.version)")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version $VERSION"

      - name: Create build directory
        run: mkdir -p build

      - name: Build binary
        run: |
          deno compile \
            --allow-all \
            --target ${{ matrix.target }} \
            --output ./build/${{ matrix.name }} \
            --no-check \
            src/main.ts

      - name: Create artifact directory
        run: mkdir -p artifacts

      - name: Package binary
        run: |
          if [[ "${{ matrix.target }}" == *"linux"* ]]; then
            tar -czf artifacts/${{ matrix.name }}-v${{ steps.version.outputs.VERSION }}.tar.gz -C build ${{ matrix.name }}
          elif [[ "${{ matrix.target }}" == *"windows"* ]]; then
            cd build && zip ../artifacts/${{ matrix.name }}-v${{ steps.version.outputs.VERSION }}.zip ${{ matrix.name }}.exe
          else
            cd build && zip ../artifacts/${{ matrix.name }}-v${{ steps.version.outputs.VERSION }}.zip ${{ matrix.name }}
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.name }}-v${{ steps.version.outputs.VERSION }}
          path: artifacts/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Get version
        id: version
        run: |
          VERSION=$(deno eval "import config from './deno.json' with { type: 'json' }; console.log(config.version)")
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: "*-v${{ steps.version.outputs.VERSION }}"
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          name: v${{ steps.version.outputs.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: artifacts/*
